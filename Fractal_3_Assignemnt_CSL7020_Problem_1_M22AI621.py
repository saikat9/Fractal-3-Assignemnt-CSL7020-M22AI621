# -*- coding: utf-8 -*-
"""Fractal-3 Assignemnt-CSL7020-Problem-1-M22AI621.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qgwagQF-mFQ5_Mx2rZJY6J1xajnkXzEW

# Implementing perceptron algorithm without making the data mean centered
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
positive_one = np.array([[1,1],[0.2,0.2],[0.9,0.5]])
negative_one = np.array([[-1,-1],[0,0.5],[0.1,0.5]])
data= np.concatenate((positive_one, negative_one), axis=0) # data is 6 rows and 2 columns
print(data)
y=[1,1,1, -1, -1, -1]
print(y)

plt.scatter(np.array(data[0:3,0]), np.array(data[0:3,1]),marker='+', label='positive_one' )
plt.scatter(np.array(data[3:6,0]), np.array(data[3:6,1]),marker='*', label='negative_one' )
plt.xlabel('x1')
plt.ylabel('x2')
plt.ylim(-2,2)
plt.xlim(-2,2)
plt.legend()
plt.show()

correctClassified = 0
w = [1,1] # As given
w = np.append(w,0) # append w0=0 since w0 is not provided
print(w)

number_of_steps_for_convergence = 0
dataframe_of_x_w = pd.DataFrame()
while (correctClassified != len(data)): #Until everything is classified
  for sample in range(len(data)):
    x = np.append(data[sample,0:2],1)
    if y[sample]==1: #Sample is positive_one 
       if np.dot(np.transpose(w),x)>=0: #WX >= 0
         correctClassified=correctClassified+1
         print("sample is positive_one")
       else: #positive_one is classified as negative_one     
          w=w+x
          number_of_steps_for_convergence += 1
          df_new_row = pd.DataFrame({ 'x1': [x[0]], 'x2': [x[1]], 'w1':float([w[0]][0]), 'w2':float([w[1]][0])})
          dataframe_of_x_w = pd.concat([dataframe_of_x_w, df_new_row])          
    else: #Sample is negative_one
         if np.dot(np.transpose(w),x)<0: # WX < 0
           correctClassified=correctClassified+1
           print("sample is negative_one")
         else: #negative_one is classified as positive_one          
          w=w-x
          number_of_steps_for_convergence += 1
          df_new_row = pd.DataFrame({ 'x1': [x[0]], 'x2': [x[1]], 'w1':float([w[0]][0]), 'w2':float([w[1]][0])})
          dataframe_of_x_w = pd.concat([dataframe_of_x_w, df_new_row])          
  if(correctClassified != len(data)):
      correctClassified=0           
print("Weight vector:", w) 
print("Number of steps required for convergence:",number_of_steps_for_convergence)
print(dataframe_of_x_w)

"""# Implementing perceptron algorithm by making the data mean centered"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
positive_one = np.array([[1,1],[0.2,0.2],[0.9,0.5]])
negative_one = np.array([[-1,-1],[0,0.5],[0.1,0.5]])
data= np.concatenate((positive_one, negative_one), axis=0) # data is 6 rows and 2 columns
data = data - np.mean(data,axis=0) # will make data mean = 0
print(data)
y=[1,1,1, -1, -1, -1]
print(y)

plt.scatter(np.array(data[0:3,0]), np.array(data[0:3,1]),marker='+', label='positive_one' )
plt.scatter(np.array(data[3:6,0]), np.array(data[3:6,1]),marker='*', label='negative_one' )
plt.xlabel('x1')
plt.ylabel('x2')
plt.ylim(-2,2)
plt.xlim(-2,2)
plt.legend()
plt.show()

correctClassified = 0
w = [1,1] # As given
w = np.append(w,0) # append w0=0 since w0 is not provided
print(w)

number_of_steps_for_convergence = 0
dataframe_of_x_w = pd.DataFrame()
while (correctClassified != len(data)): #Until everything is classified
  for sample in range(len(data)):
    x = np.append(data[sample,0:2],1)
    if y[sample]==1: #Sample is positive_one 
       if np.dot(np.transpose(w),x)>=0: #WX >= 0
         correctClassified=correctClassified+1
         print("sample is positive_one")
       else: #positive_one is classified as negative_one     
          w=w+x
          number_of_steps_for_convergence += 1
          df_new_row = pd.DataFrame({ 'x1': [x[0]], 'x2': [x[1]], 'w1':float([w[0]][0]), 'w2':float([w[1]][0])})
          dataframe_of_x_w = pd.concat([dataframe_of_x_w, df_new_row])          
    else: #Sample is negative_one
         if np.dot(np.transpose(w),x)<0: # WX < 0
           correctClassified=correctClassified+1
           print("sample is negative_one")
         else: #negative_one is classified as positive_one          
          w=w-x
          number_of_steps_for_convergence += 1
          df_new_row = pd.DataFrame({ 'x1': [x[0]], 'x2': [x[1]], 'w1':float([w[0]][0]), 'w2':float([w[1]][0])})
          dataframe_of_x_w = pd.concat([dataframe_of_x_w, df_new_row])          
  if(correctClassified != len(data)):
      correctClassified=0           
print("Weight vector:", w) 
print("Number of steps required for convergence:",number_of_steps_for_convergence)
print(dataframe_of_x_w)